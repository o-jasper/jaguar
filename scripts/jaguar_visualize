#!/usr/bin/python2
import sys, io

import argparse

parser = argparse.ArgumentParser(description="""Visualize code with graphviz.
Control flow available.""")
parser.add_argument('input',  help='Input LLL file.')
parser.add_argument('output', help='Output file.')
parser.add_argument('--prog', default='dot',
                    help='Graphviz program to use dot|twopi|neato|circo|fdp.')
parser.add_argument('--format', default=None,
                    help='Output format, defaults based on output file.')
parser.add_argument('--which', default='cf',
                    help='What kind, sg|cf for straight graph/control flow.')
parser.add_argument('--text', default='serpent',
                    help='How to write down code in nodes, serpent|lll')
parser.add_argument('--symbols', default='yes',
                    help='whether to turn >= etcetera into symbols.')
parser.add_argument('--theme', default='basic',
                    help='name of theme to use.')
parser.add_argument('--comments', default='yes',
                    help='Whether to include comments. no|false|yes|true')
parser.add_argument('--uniqify', default='yes',
                    help='Whether to force all nodes to be unique, default yes. No _does not make sense for control flow!')
args = parser.parse_args()

import pydot

from jaguar_visualize import GraphCode
from jaguar import LLL_parser, utils, write_serpent


def _write_fun(stream, ast):
    internal = io.StringIO()
    if args.text =='serpent':
        write_serpent(utils.astify(ast), internal)
    else:
        LLL_parser.LLLWriter().write_lll_stream(internal, ast)
    internal.seek(0)
    string = internal.read()
    if args.symbols == 'yes':
        string = string.replace('<=', '&le;').replace('>=', '&ge;')
        string = string.replace('!=', '&ne;')

    if string != '':
        stream.write(string[:-1] if string[-1]=='\n' else string)


def graph_file(which, fr, to, prog='dot', format=None, text='serpent'):
    graph = pydot.Dot('from-tree', graph_type='digraph')
    graph.set_fontname('Times-Bold')

    do_comments = (args.comments.lower() in ['yes','true'])

    gc = GraphCode(graph=graph, write_fun=_write_fun, theme=args.theme,
                   uniqify=args.uniqify.lower() in ['yes', 'true'],
                   do_comments=do_comments)

    stream = open(fr)
    tree = LLL_parser.LLLParser(stream, do_comments=do_comments).parse_lll()
    stream.close()

    if which in ['sg']:
        g = gc.straight(tree)
    elif which in ['cf']:
        g = gc.control_flow(tree)

    if format is None:
        format = to[-3:]
    g.write(to, format=format, prog=prog)


graph_file(args.which, args.input, args.output, args.prog,
           args.format, text=args.text)
