#!/usr/bin/python2

import sys, io

import argparse

from jaguar import utils, LLL_parser, s_expr_parser, parser, write_serpent, rewriter, compiler

def get_args():
    parser = argparse.ArgumentParser(description="""Serpent and LLL conversion upto Ethereum bytecode.""")

    parser.add_argument('input', help='Input data file, extension used for type. Just extension uses stdin.')
    parser.add_argument('output', help='Output, extension specifies type, just extension is stdin.')
    parser.add_argument('--in_type', default=None,
                        help='Overrides input type.')
    parser.add_argument('--out_type', default=None,
                        help='Overrides input type.')    
    return parser.parse_args()

args = get_args()

def tree_from(inp, fr):
    if fr == 'lll':
        return LLL_parser.LLLParser(inp, do_comments=False).parse_lll().args[1]
    elif fr == 'se':
        got = rewriter.rewrite(parser.parse('\n'.join(inp.readlines())))
    else:
        print('From %s to tree not implemented', fr)
        return None


def easm_from(inp, fr):
    return compiler.compile_lll(rewriter.rewrite(tree_from(inp, fr)))

def figure_type_n_stream(override, maybefile, default_stream):
    i = maybefile.rfind('.')
    if i == -1:
        return default_stream, False, (override or maybefile)
    else:
        return open(maybefile), True, (override or maybefile[i+1:])

def main():

    inp, c_inp, fr = figure_type_n_stream(args.in_type, args.input, sys.stdin)
    outp, c_outp, to = figure_type_n_stream(args.out_type, args.output, sys.stdout)

    def finish():
        if c_inp:
            inp.close()
        if c_outp:
            outp.close()

    if to == 'lll':  # Produce LLL.
        LLL_parser.LLLWriter().write_lll_stream(outp, rewriter.rewrite(tree_from(inp, fr)))
    elif to == 'se':  # Produce serpent code.
        # TODO will have to reconstruct from returning..
        write_serpent(tree_from(inp, fr), outp)
    elif to == 'expand_lll':
        tree = tree_from(inp, fr)
        LLL_parser.LLLWriter().write_lll_stream(outp, rewriter.rewrite(tree))
    elif to == 'easm':  # Produce Ethereum assembly(just barely not bytecode)
        for el in easm_from(inp, fr):
            outp.write(utils.to_string(el) + ' ')
    elif to == 'ebc':
        outp.write(utils.to_string(compiler.assemble(easm_from(inp, fr)).encode('hex')))
    else:
        print("dont know about output %s" % to)

    outp.write(utils.to_string('\n'))                
    return finish()

main()
